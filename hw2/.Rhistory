return(list(index,MSE))
}
sele = lapply(files, ext2)
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
sele = lapply(files, ext2)
sele
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
print(MSE)
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
792+133
792+134
ext2("spec-0314-51641-0211.fits")
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
print(MSEi[i])
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
ext2("spec-0314-51641-0211.fits")
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
print(length(sig_flux))
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
print(MSEi[i])
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
ext2("spec-0314-51641-0211.fits")
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
print(sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux))
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
print(MSEi[i])
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
ext2("spec-0314-51641-0211.fits")
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
print(sig_flux)
#print(sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux))
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
ext2("spec-0314-51641-0211.fits")
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
if(i == (dim(noisy)[1] - 2180)) print(noise_flux)
#print(sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux))
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
ext2("spec-0314-51641-0211.fits")
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
if(i == (dim(noisy)[1] - 2180)) print(noise_flux);print(sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux))
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
ext2("spec-0314-51641-0211.fits")
ext2("spec-0314-51641-0211.fits")
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
if(i == (dim(noisy)[1] - 2180)) print(sum(is.na(noise_flux)))
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
ext2("spec-0314-51641-0211.fits")
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
if(i == (dim(noisy)[1] - 2180)) print(sum(is.na(noise_flux))); print(sum(is.na(sig_flux)))
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
ext2("spec-0314-51641-0211.fits")
ext2 = function(fil){
sig_flux = cB58[,2]
noisy = read.fitstab(paste('data/',fil,sep = ""))
MSEi = rep(0,dim(noisy)[1] - 2180)
corri = rep(0,dim(noisy)[1] - 2180)
#noise_flux = scale(noisy[,1])
for(i in 1:(dim(noisy)[1] - 2180)){
noise_flux = noisy[i:(i+2180),1]
noise_flux = noise_flux[noisy[i:(i+2180),4] == 0]  ###   ??
sig_flux = sig_flux[noisy[i:(i+2180),4] == 0]
sig_flux = scale(sig_flux)
noise_flux = scale(noise_flux)
if(i == (dim(noisy)[1] - 2180)) {print(sum(is.na(noise_flux))); print(sum(is.na(sig_flux)))}
MSEi[i] = sqrt(sum((sig_flux - noise_flux)^2))/length(sig_flux)
#corri[i] = cor(sig_flux,noise_flux)
}
#index = union(order(MSEi)[1], order(corri,decreasing = TRUE)[1])
#MSE = MSEi[index]
#corr = corri[index]
index = which(MSEi == min(MSEi))
MSE = min(MSEi)
#return(list(index,MSE,corr))
return(list(index,MSE))
}
ext2("spec-0314-51641-0211.fits")
if (!require(ggplot2)){
install.packages("ggplot2")
stopifnot(require(ggplot2))
}
if (!require(gridExtra)){
install.packages("gridExtra")
stopifnot(require(gridExtra))
}
if (!require(cowplot)){
install.packages("cowplot")
stopifnot(require(cowplot))
}
if (!require(olsrr)){
install.packages("olsrr")
stopifnot(require(olsrr))
}
if (!require(MASS)){
install.packages("MASS")
stopifnot(require(MASS))
}
if (!require(shiny)){
install.packages("shiny")
stopifnot(require(shiny))
}
if (!require(shinythemes)){
install.packages("shinythemes")
stopifnot(require(shinythemes))
}
if (!require(dplyr)){
install.packages("dplyr")
stopifnot(require(dplyr))
}
if (!require(readr)){
install.packages("readr")
stopifnot(require(readr))
}
if (!require(rsconnect)){
install.packages("rsconnect")
stopifnot(require(rsconnect))
}
bf = read.csv("BodyFat.csv")
bf
summary(bf[,-1])
gp = list()
for (i in 1:15+2){
my.bf = data.frame(x = bf[,i], y = bf$BODYFAT)
gp[[i-2]] = ggplot(data=my.bf, aes(x,y)) + geom_point() +
geom_smooth(method = 'loess') + labs(x = tolower(names(bf)[i]), y = "Body Fat")
}
all_gp = grid.arrange(gp[[1]],gp[[2]],gp[[3]],gp[[4]],gp[[5]],gp[[6]],gp[[7]],
gp[[8]],gp[[9]],gp[[10]],gp[[11]],gp[[12]],gp[[13]],gp[[14]],gp[[15]],ncol=3,nrow=5)
ggsave("plot1.pdf",all_gp,width = 9, height = 15)
lm.density = lm(data=bf, BODYFAT~DENSITY)
outliers = order(abs(lm.density$fitted.values - bf$BODYFAT), decreasing = TRUE)[1:5]
ggplot(data = bf, aes(DENSITY, BODYFAT)) + geom_point(color = "black") +
geom_smooth(method = lm) +
geom_point(aes(DENSITY[outliers[1]],BODYFAT[outliers[1]]), color = "red") +
geom_point(aes(DENSITY[outliers[2]],BODYFAT[outliers[2]]), color = "red") +
geom_point(aes(DENSITY[outliers[3]],BODYFAT[outliers[3]]), color = "red") +
geom_point(aes(DENSITY[outliers[4]],BODYFAT[outliers[4]]), color = "red") +
geom_point(aes(DENSITY[outliers[5]],BODYFAT[outliers[5]]), color = "red")
newbf = bf[-outliers,-c(1,3)]
lm.bmi = lm(data = newbf, ADIPOSITY~WEIGHT/HEIGHT^2)
summary(lm.bmi)
residual.order = order(abs(residuals(lm.bmi)), decreasing=TRUE)
qplot(data = newbf, x = WEIGHT/HEIGHT^2, y = ADIPOSITY)
residual.order = order(abs(residuals(lm.bmi)), decreasing=TRUE)
newbf[residual.order[1],4] = sqrt(newbf[residual.order[1],3]/newbf[residual.order[1],5]*703)
lm.bmi = lm(data = newbf, ADIPOSITY~WEIGHT/HEIGHT^2)
residual.order = order(abs(residuals(lm.bmi)), decreasing=TRUE)
qplot(data = newbf, x = WEIGHT/HEIGHT^2, y = ADIPOSITY)
newbf = newbf[-residual.order[1:2], ]
row.names(newbf) = 1:dim(newbf)[1]
qplot(data = newbf, x = WEIGHT/HEIGHT^2, y = ADIPOSITY)
gp = list()
for (i in 1:14+1){
my.bf = data.frame(x = newbf[,i], y = newbf$BODYFAT)
gp[[i-1]] = ggplot(data=my.bf, aes(x,y)) + geom_point() +
geom_smooth(method = 'loess') + labs(x = tolower(names(newbf)[i]), y = "Body Fat")
}
all_gp = grid.arrange(gp[[1]],gp[[2]],gp[[3]],gp[[4]],gp[[5]],gp[[6]],gp[[7]],
gp[[8]],gp[[9]],gp[[10]],gp[[11]],gp[[12]],gp[[13]],gp[[14]],ncol=3,nrow=5)
ggsave("plot2.pdf",all_gp,width = 30, height = 50, limitsize = FALSE)
lm.full = lm(data = newbf, BODYFAT~.)
model.aic.both <- step(lm.full, direction = "both", k = 2)
summary(model.aic.both)
step.result = ols_step_all_possible(lm.full)
write.csv(step.result, "step_result.csv")
lm.final = lm(data=newbf, BODYFAT~WEIGHT+ABDOMEN)
summary(lm.final)
plot(lm.final)
qplot(data = newbf, x = lm.final$coefficients[2]*WEIGHT+lm.final$coefficients[3]*ABDOMEN, y = BODYFAT)+geom_smooth()
n=dim(newbf)[1];p=2;index = 1:n
#leverage
h<-2*p/n
le<-hatvalues(lm.final)
qplot(index, le)+labs(y="Leverage", x="Index")+
geom_abline(aes(intercept=h,slope=0),colour="blue")+
annotate(geom = "text", x = index, y = le, label = index)+
geom_linerange(x=index, ymin=0, ymax=le)
#diffits
h<-2*sqrt(p/n)
dfs<-dffits(lm.final)
qplot(index, dfs)+labs(y="DFFITS", x="Index")+
geom_abline(aes(intercept=-h,slope=0),colour="blue", linetype="dashed")+
geom_abline(aes(intercept=h,slope=0),colour="blue", linetype="dashed")+
geom_abline(aes(intercept=-1,slope=0),colour="blue", linetype="dashed")+
geom_abline(aes(intercept=1,slope=0),colour="blue", linetype="dashed")+
annotate(geom = "text", x = index, y = dfs, label = index)+
geom_linerange(x=index, ymin=0, ymax=dfs)+
geom_abline(aes(intercept=0,slope=0),colour="blue")
#cook's distance
h<-qf(0.50,p,n-p)
cd<-cooks.distance(lm.final)
qplot(index, cd)+labs(y="Cook's Distance", x="Index")+
geom_abline(aes(intercept=h,slope=0),colour="blue")+
annotate(geom = "text", x = index, y = cd, label = index)+
geom_linerange(x=index, ymin=0, ymax=cd)
newbf = newbf[-39,]
row.names(newbf) = 1:dim(newbf)[1]
lm.final2 = lm(data=newbf, BODYFAT~WEIGHT+ABDOMEN)
summary(lm.final2)
qplot(data = newbf, x = lm.final2$coefficients[2]*WEIGHT+lm.final2$coefficients[3]*ABDOMEN, y = BODYFAT)+geom_smooth()
plot(lm.final2)
shapiro.test(studres(lm.final2))
bc = boxcox(lm.final2)
lambda <- bc$x[which(bc$y==max(bc$y))]
lm.final3 = lm(data=newbf, BODYFAT^lambda~WEIGHT+ABDOMEN)
summary(lm.final3)
plot(lm.final3)
shapiro.test(studres(lm.final3))
ui <- fluidPage(
titlePanel("BodyFat Calculator"),
sidebarLayout(
sidebarPanel("Calculator",
numericInput("weight",h3("Weight (inch)"), value = 1),
numericInput("abodmen",h3("The circumference of abodmen (cm)"), value = 1)),
mainPanel("Confidence Intervel of your bodyfat",
textOutput(outputId = "bodyfat")
)
)
)
server <- function(input,output) {
output$bodyfat = renderText({
paste0("You bodyfat is: ",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[1],"\n","The 95% confidence interval of your bodyfat is", "[",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[2],",",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[3], "]")})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("BodyFat Calculator"),
sidebarLayout(
sidebarPanel("Calculator",
numericInput("weight",h3("Weight (lbs)"), value = 1),
numericInput("abodmen",h3("The circumference of abodmen (cm)"), value = 1)),
mainPanel("Confidence Intervel of your bodyfat",
textOutput(outputId = "bodyfat")
)
)
)
server <- function(input,output) {
output$bodyfat = renderText({
paste0("You bodyfat is: ",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[1],"\n","The 95% confidence interval of your bodyfat is", "[",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[2],",",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[3], "]")})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("BodyFat Calculator"),
sidebarLayout(
sidebarPanel("Calculator",
numericInput("weight",h3("Weight (lbs)"), value = 1),
numericInput("abodmen",h3("The circumference of abodmen (cm)"), value = 1)),
mainPanel("Confidence Intervel of your bodyfat",
textOutput(outputId = "bodyfat")
)
)
)
server <- function(input,output) {
output$bodyfat = renderText({
paste0("You bodyfat is: ",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[1],".\n","The 95% confidence interval of your bodyfat is", "[",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[2],",",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[3], "].")})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("BodyFat Calculator"),
sidebarLayout(
sidebarPanel("Calculator",
numericInput("weight",h3("Weight (lbs)"), value = 1),
numericInput("abodmen",h3("The circumference of abodmen (cm)"), value = 1)),
mainPanel(h1("Confidence Intervel of your bodyfat"),
textOutput(outputId = "bodyfat")
)
)
)
server <- function(input,output) {
output$bodyfat = renderText({
paste0("You bodyfat is: ",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[1],".\n","The 95% confidence interval of your bodyfat is", "[",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[2],",",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[3], "].")})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("BodyFat Calculator"),
sidebarLayout(
sidebarPanel("Calculator",
numericInput("weight",h3("Weight (lbs)"), value = 1),
numericInput("abodmen",h3("The circumference of abodmen (cm)"), value = 1)),
mainPanel(h1("Confidence Intervel of your bodyfat"),
textOutput(outputId = "bodyfat")
)
)
)
server <- function(input,output) {
output$bodyfat = renderText({
paste0("You bodyfat is: ",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[1],".\n","The 95% confidence interval of your bodyfat is", "[",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[2],",",
predict(lm.final3, newdata = data.frame(WEIGHT = input$weight, ABDOMEN=input$abodmen), interval = "predict")[3], "].")}
)
}
shinyApp(ui = ui, server = server)
